;[program:应用名称]
[program:cat]

;执行的命令
command=python printdate.py

;进程名称
;当numprocs为1时,process_name=%(program_name)s
;当numprocs>=2时,%(program_name)s_%(process_num)02d
process_name=%(program_name)s

;进程数量
numprocs=1

;执行命令的目录
directory=/home/wang

;掩码
umask=022

;优先级，值越高，启动的越晚，关闭的越早。默认999
priority=999

;是否自动启动。如果是true,当supervisor启动时,程序将会自动启动
autostart=true


autorestart=true
;值范围：false, unexpected, true
;false：不会自动重新启动该进程
;unexpected：当程序退出并且退出代码不是与此进程配置相关联的退出代码（请参阅exitcodes，默认值为0,2）时，该进程将重新启动
;true：进程将在退出时无条件地重新启动，不考虑其退出代码。

; 启动10秒后没有异常退出，就当作已经正常启动了。默认1秒
startsecs=10

;该命令退出后，尝试重新启动的次数，默认3次
startretries=3

;当退出码是多少时执行重启。默认值0,2
exitcodes=0,2

;停止信号
stopsignal=TERM

stopwaitsecs=10

;以哪个用户执行该命令
user=root

;错误重定向
redirect_stderr=false

;输出日志文件
stdout_logfile=/var/log/supervisor/printdate.log

;单个日志文件的最大容量
stdout_logfile_maxbytes=1MB

;最多几个日志文件
stdout_logfile_backups=10

;错误日志
stderr_logfile=/var/log/supervisor/printdateerr.log
stderr_logfile_maxbytes=1MB
stderr_logfile_backups=10

;环境变量设置
environment=A="1",B="2"

# 附录1.stopsignal
# 中断: INT(类似于Ctrl+C)(kill -INT pid), 退出后会将写文件或日志(推荐)
# 终止: TERM(kill -TERM pid)
# 挂起: HUP(kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同
# 从容停止: QUIT(kill -QUIT pid)
# KILL, USR1, USR2，其他见命令(kill -l)



[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
Type=notify
# the specific user that our service will run as
User=someuser
Group=someuser
# another option for an even more restricted service is
# DynamicUser=yes
# see http://0pointer.net/blog/dynamic-users-with-systemd.html
RuntimeDirectory=/var/falcon/malkova/env/gunicorn
WorkingDirectory=/var/falcon/malkova
ExecStart=/var/falcon/malkova/env/gunicorn malkova.wsgi
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true

[Install]
WantedBy=multi-user.target


